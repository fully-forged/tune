name: Tune CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: "Lint"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        elixir: ['1.11.3']
        otp: ['23.2.4']

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Setup elixir
      uses: erlef/setup-elixir@v1
      with:
        elixir-version: ${{ matrix.elixir }} # Define the elixir version [required]
        otp-version: ${{ matrix.otp }}

    - name: Retrieve Mix Dependencies Cache
      uses: actions/cache@v2.1.6
      id: mix-cache
      with:
        path: deps
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

    - name: Install Dependencies
      if: steps.mix-cache.outputs.cache-hit != 'true'
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get

    - name: Check Formatting
      run: mix format --check-formatted

    - name: Check Credo
      run: mix credo list --format oneline

    - name: Retrieve PLT Cache
      uses: actions/cache@v2.1.6
      id: plt-cache
      with:
        path: priv/plts
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-plts-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

    - name: Create PLTs
      if: steps.plt-cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p priv/plts
        mix dialyzer --plt

    - name: Run dialyzer
      run: mix dialyzer --no-check

  test:
    name: "Elixir Tests"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        elixir: ['1.11.3']
        otp: ['23.2.4']

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Setup elixir
      uses: erlef/setup-elixir@v1
      with:
        elixir-version: ${{ matrix.elixir }} # Define the elixir version [required]
        otp-version: ${{ matrix.otp }}

    - name: Retrieve Mix Dependencies Cache
      uses: actions/cache@v2.1.6
      id: mix-cache
      with:
        path: deps
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

    - name: Install Dependencies
      if: steps.mix-cache.outputs.cache-hit != 'true'
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get

    - name: Run Tests
      run: mix test --timeout 120000
      env:
        CI: "true"

  js_compile:
    name: "JS Compile"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        elixir: ['1.11.3']
        otp: ['23.2.4']

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Retrieve Npm Dependencies Cache
      uses: actions/cache@v2.1.6
      id: npm-cache
      with:
        path: assets/node_modules
        key: ${{ runner.os }}-npm-${{ hashFiles(format('{0}{1}', github.workspace, '/assets/package-lock.json')) }}

    - name: Install NPM Dependencies
      if: steps.npm-cache.outputs.cache-hit != 'true'
      run: cd assets && npm install

    - name: Setup elixir
      uses: erlef/setup-elixir@v1
      with:
        elixir-version: ${{ matrix.elixir }} # Define the elixir version [required]
        otp-version: ${{ matrix.otp }}

    - name: Retrieve Mix Dependencies Cache
      uses: actions/cache@v2.1.6
      id: mix-cache
      with:
        path: deps
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

    - name: Install Mix Dependencies
      if: steps.mix-cache.outputs.cache-hit != 'true'
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get

    - name: Compile assets
      run: cd assets && npm run deploy

  js_test:
    name: "JS Tests"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Install Dependencies
      run: cd assets && npm install

    - name: Run Tests
      run: cd assets && npm test